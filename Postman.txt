1. Register User
Request:


POST http://localhost:3001/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123",
  "username": "testuser"
}
Responses:

Success (201 Created):
json
Copy code
{
  "message": "Registration successful! Please check your email to verify your account."
}
Conflict (409 Conflict):
json

{
  "statusCode": 409,
  "message": "User with this email already exists",
  "error": "Conflict"
}




2. Verify Email
Request:


GET http://localhost:3001/auth/verify-email?token=<verification_token>
Responses:

Success (200 OK):
json
Copy code
{
  "message": "Email verified successfully!"
}
Error (400 Bad Request):
json
Copy code
{
  "statusCode": 400,
  "message": "Invalid token",
  "error": "Bad Request"
}



3. Login User
Request:

POST http://localhost:3001/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123"
}
Responses:

Success (200 OK):
json
Copy code
{
  "access_token": "<jwt_token>",
  "user": {
    "email": "test@example.com",
    "username": "testuser"
  }
}
Unauthorized (401 Unauthorized):
json
Copy code
{
  "statusCode": 401,
  "message": "Unauthorized",
  "error": "Unauthorized"
}


4. Create Contact
Request:

POST http://localhost:3001/contacts
Content-Type: application/json
Authorization: Bearer <jwt_token>

{
  "name": "John Doe",
  "email": "john@example.com",
  "phoneNumber": "1234567890",
  "postalAddress": "123 Main St"
}
Responses:

Success (201 Created):
json
Copy code
{
  "id": 1,
  "name": "John Doe",
  "email": "john@example.com",
  "phoneNumber": "1234567890",
  "postalAddress": "123 Main St",
  "user": {
    "id": 1,
    "email": "test@example.com",
    "username": "testuser",
    "isEmailVerified": true,
    "contacts": []
  }
}
Unauthorized (401 Unauthorized):
json
Copy code
{
  "statusCode": 401,
  "message": "Unauthorized",
  "error": "Unauthorized"
}


5. Get Contacts
Request:


GET http://localhost:3001/contacts?page=1&limit=10
Authorization: Bearer <jwt_token>
Responses:

Success (200 OK):
json
Copy code
{
  "contacts": [
    {
      "id": 1,
      "name": "AMan",
      "email": "Aman@example.com",
      "phoneNumber": "1234567890",
      "postalAddress": "123 Main St",
      "user": {
        "id": 1,
        "email": "aman@example.com",
        "username": "testuser",
        "isEmailVerified": true,
        "contacts": []
      }
    }
  ],
  "total": 1
}
Unauthorized (401 Unauthorized):
json

{
  "statusCode": 401,
  "message": "Unauthorized",
  "error": "Unauthorized"
}
6. Search Contacts
Request:

sql

GET http://localhost:3001/contacts/search?query=John
Authorization: Bearer <jwt_token>
Responses:

Success (200 OK):
json

[
  {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "phoneNumber": "1234567890",
    "postalAddress": "123 Main St",
    "user": {
      "id": 1,
      "email": "test@example.com",
      "username": "testuser",
      "isEmailVerified": true,
      "contacts": []
    }
  }
]
Unauthorized (401 Unauthorized):
json

{
  "statusCode": 401,
  "message": "Unauthorized",
  "error": "Unauthorized"
}

7. Send Email (for verification)

Internal Call:

javascript
const verificationLink = `http://localhost:3001/auth/verify-email?token=${verificationToken}`;
await this.emailService.sendEmail(
  newUser.email,
  'Email Verification',
  `Please click the following link to verify your email: ${verificationLink}`
);